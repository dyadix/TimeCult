<!--
    TimeCult Build File
    
    Copyright (c) R.Vishnyakov, 2005-2019 <dev@codeflections.com>

     BUILD TARGETS:

     == main ==

     all (default)  Create packages and documentation;
     package        Generate pakages (.war, .jar files);
     build          Build the application without creating packages;
     jar            Create jar packages for separately distributable
                    libraries;
     doc            Generate documentation;
     version
     clean          Clean up directories;
     launcher       Builds a launcher (Windows executable);
     winsetup       Creates a Windows setup file. Requires innosetup.dir property pointing
                    to InnoSetup installation directory in build.properties.

-->
<project name="TimeCult" default="all" basedir=".">

    <!-- Configure the context path for this application -->
    <property name="path" value="/${appname}"/>

    <!-- Configure directories for building -->
    <property name="source" location="src"/>
    <property name="resources" location="resources"/>
    <property name="build" location="build"/>
    <property name="classes" location="${build}/classes"/>
    <property name="lib" location="lib"/>
    <property name="dist" location="dist"/>
    <property name="javadoc" location="${build}/doc/java"/>
    <property name="appname" value="timecult"/>
    <property name="appfile" value="${appname}.jar"/>
    <property name="version-file" location="version.number"/>
    <property name="appinfo-file" value="${classes}/net/sf/timecult/appinfo.properties"/>
    <property file="local.build.properties"/>
    <property file="${version-file}"/>
    <property name="temp.dir" location="build/temp"/>
    <property name="doc.temp" location="${temp.dir}/doc"/>
    <property name="setup.ini" location="setup.ini"/>
    <property name="docmc.jar" location="tools/docmc.jar"/>
    <property name="change-log-file" location="changelog.txt"/>
    <!-- DocMC compiler -->
    <property name="doc.base" location="doc"/>
    <property name="linux-scripts" location="linux"/>
    <property name="build-artifacts" location="${build}/artifacts"/>

    <condition property="isOsWindows">
        <os family="windows"/>
    </condition>

    <condition property="isOsLinux">
        <os family="unix"/>
    </condition>

    <!-- Configure the custom Ant tasks for the Manager application -->
    <path id="classpath.id">
        <fileset dir="${lib}">
            <include name="*.jar"/>
            <exclude name="swt.jar"/>
        </fileset>
        <fileset dir="${swt.dir}">
            <filename name="swt.jar"/>
        </fileset>
    </path>

    <scriptdef name="file.date" language="javascript">
        <attribute name="file"/>
        <attribute name="property"/>
        fileName = attributes.get("file");
        property = attributes.get("property");
        file = new java.io.File(fileName);
        fileTimestamp = file.lastModified();
        dateFormat = new java.text.SimpleDateFormat("YYMMdd");
        fileDate = dateFormat.format(new java.util.Date(fileTimestamp));
        project.setNewProperty(property, fileDate);
    </scriptdef>

    <target name="init">
        <tstamp>
            <format property="TODAY" pattern="MMMM d, yyyy" locale="en"/>
        </tstamp>
        <file.date file="${change-log-file}" property="build.number"/>
        <property name="build-stamp" value="${appname}-${major}.${minor}-${build.number}"/>
    </target>


    <!-- Deploy to the final location -->
    <target name="deploy" depends="package">
        <copy todir="${deploy.dir}">
            <fileset dir="${dist}">
                <include name="${appfile}"/>
            </fileset>
        </copy>
    </target>

    <target name="all" depends="dist,source-package,winsetup"/>

    <!-- Compile all the application -->
    <target name="compile" depends="init">
        <mkdir dir="${classes}"/>
        <javac srcdir="${source}" destdir="${classes}" includes="**/*.java" source="1.8" debug="on" target="1.8">
            <classpath refid="classpath.id"/>
        </javac>
    </target>

    <!-- Build the application and copy all resoruce to build directory -->
    <target name="build" depends="localize,compile,manifest" description="Compile app Java files and copy resources">
        <copy todir="${classes}">
            <fileset dir="${resources}">
                <include name="**/*.png"/>
                <include name="**/*.gif"/>
                <include name="**/*.properties"/>
                <include name="**/*.html"/>
                <include name="**/*.ttf"/>
                <include name="**/*.ico"/>
            </fileset>
        </copy>
    </target>

    <!-- Make a package -->
    <target name="package" depends="build,appinfo" description="Packages .jar file">
        <echo message="Packaging to .jar file...."/>
        <mkdir dir="${dist}"/>
        <!-- <delete file="${dist}/${appfile}" /> -->
        <jar jarfile="${dist}/${appfile}" manifest="${classes}/manifest.mf">
            <fileset dir="${classes}">
                <include name="**/*.class"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.properties"/>
                <include name="**/*.html"/>
                <include name="**/*.ttf"/>
                <include name="**/*.ico"/>
            </fileset>
        </jar>
        <!-- Copy libraries -->
        <mkdir dir="${dist}/lib"/>
        <copy todir="${dist}/lib">
            <fileset dir="${lib}">
                <include name="**/*.jar"/>
                <exclude name="skylf.jar"/>
                <exclude name="swt.jar"/>
            </fileset>
            <fileset dir="${swt.dir}">
                <include name="swt.jar"/>
            </fileset>
            <fileset dir="${lib}" includes="*.txt,*.TXT"/>
        </copy>
        <copy todir="${dist}">
            <fileset dir="." includes="*.txt,*.TXT"/>
            <fileset dir="${lib}" includes="*.dll" excludes="swt*.dll"/>
            <!-- Native libraries -->
        </copy>
        <!--
        <copy todir="${dist}/${appfile}!">
            <fileset dir="${resources}">
                <include name="**/*.html" />
                <include name="**/*.gif" />
                <include name="**/*.png" />
            </fileset>
        </copy>
        -->
    </target>

    <!-- Clean up build results -->
    <target name="clean">
        <delete dir="${dist}"/>
        <delete dir="${build}"/>
        <delete>
            <fileset dir="." includes="*.zip,*.log,*.exe"/>
        </delete>
    </target>


    <!-- Create manifest file -->
    <target name="manifest">
        <mkdir dir="${classes}"/>
        <manifest file="${classes}/manifest.mf">
            <attribute name="Built-By" value="rvishnyakov"/>
            <attribute name="Main-Class" value="net.sf.timecult.TimeTracker"/>
            <attribute name="Class-Path"
                       value="lib/swt.jar lib/swtcalendar.jar lib/xmlenc-0.52.jar lib/iText-5.0.2.jar"/>
        </manifest>
    </target>

    <!-- Create application info -->
    <target name="appinfo" depends="init">
        <propertyfile file="${appinfo-file}">
            <entry key="appname" value="TimeCult"/>
            <entry key="author" value="rvishnyakov"/>
            <entry key="eMail" value="dyadix@gmail.com"/>
            <entry key="majorVersion" value="${major}"/>
            <entry key="minorVersion" value="${minor}"/>
            <entry key="versionType" value="Beta"/>
            <entry key="build" value="${build.number}"/>
            <entry key="buildDate" value="${TODAY}"/>
        </propertyfile>
    </target>

    <!-- Create a distributable package -->
    <target name="dist" depends="linux-dist,win-dist">

    </target>

    <target name="linux-dist" if="isOsLinux" depends="package">
        <tar destfile="${build-artifacts}/${build-stamp}-linux.tar.gz" compression="gzip">
            <tarfileset dir="${dist}" prefix="TimeCult-${major}.${minor}">
                <type type="file"/>
            </tarfileset>
            <tarfileset
                file="./timecult.ico"
                prefix="TimeCult-${major}.${minor}"/>
            <tarfileset
                    file="${linux-scripts}/timecult.sh"
                    filemode="555"
                    prefix="TimeCult-${major}.${minor}"/>
        </tar>
    </target>

    <target name="win-dist" if="isOsWindows" depends="launcher">
        <zip destfile="${build-artifacts}/${build-stamp}-win-${os.arch}-portable.zip">
            <zipfileset dir="${dist}" prefix="${build-stamp}"/>
        </zip>
    </target>

    <target name="launcher" depends="package,copy-jre" if="isOsWindows">
        <taskdef name="launch4j"
                 classname="net.sf.launch4j.ant.Launch4jTask"
                 classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />
        <launch4j configfile="launch4j.xml"/>
    </target>

    <!-- Create Windows setup file -->
    <target name="winsetup" depends="launcher,gen-iss-version-info" if="isOsWindows">
        <property name="build-stamp" value="${appname}-${major}.${minor}-${build.number}"/>
        <exec executable="${innosetup.dir}/ISCC" failonerror="true">
            <arg value="/O${basedir}"/>
            <arg value="/F${build-stamp}-win-x64-setup"/>
            <arg value="timecult-win32.iss"/>
        </exec>
    </target>

    <target name="localize">
        <native2ascii encoding="cp1251" src="${resources}" dest="${resources}" includes="**/*.cp1251"
                      ext=".properties"/>
    </target>

    <target name="source-package" depends="init">
        <zip destfile="${build-artifacts}/${build-stamp}-src.zip">
            <fileset dir="." includes="build.number,build.properties,build.xml,gpl.txt,launch4j.xml"/>
            <fileset dir="." includes="readme.txt,timecult.ico,timecult-win32.iss,version.number"/>
            <zipfileset dir="src" includes="*/**" excludes="**/CVS" prefix="src"/>
            <zipfileset dir="resources" includes="*/**" excludes="**/CVS" prefix="resources"/>
            <zipfileset dir="lib" includes="*/**" excludes="**/CVS" prefix="lib"/>
            <zipfileset dir="tools" includes="*/**" excludes="**/CVS" prefix="tools"/>
            <zipfileset dir="doc" includes="*/**" excludes="**/CVS" prefix="doc"/>
        </zip>
    </target>

    <!-- Generate Java documentation -->
    <target name="javadoc" description="Generate java documentation">
        <mkdir dir="${javadoc}"/>
        <javadoc
                packagenames="*"
                sourcepath="src"
                destdir="${javadoc}"
                use="true"
                package="true"
                windowtitle="TimeCult"
                bottom="Copyright (c) R.Vishnyakov, 2005-2012">
        </javadoc>
    </target>

    <target name="gen-iss-version-info" depends="init" if="isOsWindows">
        <mkdir dir="${temp.dir}"/>
        <echo file="${temp.dir}/version.iss">
            [Setup]
            AppVerName=TimeCult ${major}.${minor}
            VersionInfoVersion=${major}.${minor}
        </echo>
    </target>


    <target name="upload-doc" depends="doc">
        <scp
                todir="${sf.user}:${sf.pass}@web.sourceforge.net:/home/groups/t/ti/timecult/htdocs/help"
                sftp="true"
                trust="true">
            <fileset dir="${build}/doc"/>
        </scp>
    </target>

    <!-- Generate documentation -->
    <target name="doc">
        <antcall target="dm2help">
            <param name="doc.src" value="${doc.base}/manual"/>
            <param name="doc.out" value="${build}/doc"/>
            <param name="help.file" value="timecult_en.chm"/>
        </antcall>
    </target>

    <target name="copy-jre" if="isOsWindows">
        <mkdir dir="${dist}"/>
        <copy todir="${dist}/jre">
            <fileset dir="${jre.dir}"/>
        </copy>
    </target>

    <!-- Assamble help file from .dm files -->
    <target name="dm2help">
        <!--
            Convert .dm files to auriga XML
        -->
        <mkdir dir="${doc.temp}"/>
        <apply executable="java" dest="${doc.temp}" dir="${doc.src}" failonerror="true">
            <arg value="-jar"/>
            <arg path="${docmc.jar}"/>
            <srcfile/>
            <targetfile/>
            <fileset dir="${doc.src}" includes="**/*.dm"/>
            <mapper type="glob" from="*.dm" to="*.xml"/>
        </apply>
        <!--
            Run auriga tool to generate help files
        -->
        <mkdir dir="${doc.out}"/>
        <copy todir="${doc.out}">
            <fileset dir="${doc.src}" includes="**/*.css,**/*.png"/>
        </copy>
        <path id="auriga.libs">
            <dirset dir="${aurigadoc.dir}/bin"/>
            <fileset dir="${aurigadoc.dir}/lib">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <pathconvert targetos="unix" property="auriga.classpath" refid="auriga.libs" pathsep=";"/>
        <path id="doc.path">
            <pathelement path="${doc.temp}"/>
        </path>
        <pathconvert targetos="unix" property="doc.url.path" refid="doc.path"/>
        <java classname="com.aurigalogic.aurigadoc.cmdline.Converter" fork="yes">
            <classpath>
                <pathelement path="${auriga.classpath}"/>
            </classpath>
            <arg value="-mhtml"/>
            <arg value="-XML"/>
            <arg value="file:///${doc.url.path}/manual.xml"/>
            <arg value="-OUT"/>
            <arg value="${doc.out}"/>
        </java>
        <!-- <move file="${doc.out}/adchm.chm" tofile="${doc.out}/${help.file}"/> -->
        <copy file="${doc.out}/table_of_content.html" tofile="${doc.out}/index.html"/>
        <delete dir="${doc.temp}"/>
    </target>

</project>
